import {addToggleFunctionality} from "./toggleGenerator";

interface DirectoryItem {
    name: string;
    type: 'file' | 'directory';
    link: string;
}

export function generateHtmlPage(title: string, content: string, currentPath: string): string {
    const breadcrumbs = generateBreadcrumbs(currentPath, true);
    return generatePageHtml(title, content, breadcrumbs);
}

export function generateDirectoryPageHtml(currentPath: string, items: DirectoryItem[]): string {
    const breadcrumbs = generateBreadcrumbs(currentPath, false);
    const directoryListContent = generateDirectoryListContent(currentPath, items);
    const title = `sijun-yang.com` //`Index of ${currentPath}`
    return generatePageHtml(title, directoryListContent, breadcrumbs);
}

function generatePageHtml(title: string, content: string, breadcrumbs: string): string {
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <link rel="stylesheet" href="/assets/normalize.css">
    <link rel="stylesheet" href="/assets/d2coding-subset.css">
    <style>
        :root {
            font-size: 16px; /* Base font size for rem units */
            --primary-bg-color: #F8F8F8; /* Soft white background */
            --text-color: #333333; /* Dark grey for text */
            --link-color: #0040FFFF; /* Blue link color */
            --font-family: 'D2Coding';
            --padding-base: 15px;
            --content-width: 800px;
        }
        a {
            color: var(--link-color);
            text-decoration: none;
        }
        a:visited {
            color: var(--link-color);
        }
        a:hover {
            text-decoration: underline;
        }
        html, body {
            height: 100%;
            margin: 0;
            font-family: var(--font-family);
            color: var(--text-color);
            font-size: 1rem;
            display: flex;
            flex-direction: column;
            background-color: var(--primary-bg-color);
        }
        .container {
            width: var(--content-width);
            margin: 0 auto;
            padding: var(--padding-base);
            box-sizing: border-box;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        main {
            flex-grow: 1;
        }
        header nav {
            font-size: 1.25rem; 
        }
        header .list-toggle-btn {
            font-size: 0.875rem;
        }
        footer {
            text-align: center;
            font-size: 0.875rem; 
        }
        .toggle-icon {
            cursor: pointer;
            display: inline-block;
        }
        .triangle-toggle {
            width: 0;
            height: 0;
            border-left: 0.25rem solid transparent;
            border-right: 0.25rem solid transparent;
            border-top: 0.375rem solid #333;
            cursor: pointer;
            transition: transform 0.3s ease;
            display: inline-block;
            vertical-align: middle;
            margin-right: 6px;
            margin-left: -14px;
            transform: rotate(-90deg);
        }
        .triangle-toggle.toggled {
            transform: rotate(0deg);
        }
        li.has-toggle {
            list-style-type: none;
        }
        .file-icon {
            font-size: 1rem;
            vertical-align: middle;
        }
        @media (max-width: 768px) {
            :root {
                font-size: 14px;
            }
            .container {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <nav>${breadcrumbs}</nav>
            <div class="list-toggle-btn" style="margin-top: 10px;">
                <a href="#" onclick="window.expandImmediateChildrenToggles(); return false;">Ïó¥Í∏∞</a>
                /
                <a href="#" onclick="window.collapseImmediateChildrenToggles(); return false;">Îã´Í∏∞</a>
            </div>
        </header>
        <main>
            ${content}
        </main>
        <footer>
            <p>Generated by Static Blog Generator</p>
        </footer>
    </div>
</body>
</html>`;
    return addToggleFunctionality(html);
}

function generateBreadcrumbs(currentPath: string, isFile: boolean = false): string {
    const segments = currentPath.split('/').filter(Boolean);
    let breadcrumbsHtml = '<a href="/">Home</a>';
    let currentLink = '';

    segments.forEach((segment, index) => {
        currentLink += '/' + segment;
        if (isFile && index === segments.length - 1) {
            breadcrumbsHtml += ` / <a href="${currentLink}.html">${segment}</a>`;
        } else {
            breadcrumbsHtml += ` / <a href="${currentLink}/index.html">${segment}</a>`;
        }
    });
    return breadcrumbsHtml;
}

function generateDirectoryListContent(currentPath: string, items: DirectoryItem[]): string {
    let listItemsHtml = '';
    const parentPath = currentPath.substring(0, currentPath.lastIndexOf('/'));
    if (currentPath !== '/') {
        listItemsHtml += `
            <li><a href="${parentPath === '' ? '' : parentPath}/index.html">../</a></li>`;
    }

    const sortedItems = items.sort((a, b) => {
        if (a.type === 'directory' && b.type === 'file') return -1;
        if (a.type === 'file' && b.type === 'directory') return 1;
        return a.name.localeCompare(b.name, undefined, {
            numeric: true,
            sensitivity: 'base'
        });
    });

    sortedItems.forEach(item => {
        const [icon, dataSrc, content] = (() => {
            switch (item.type) {
                case 'directory':
                    return ['üìÅ',
                        item.link.endsWith('/index.html') ? item.link : item.link + '/index.html',
                        item.name + '/'];
                case 'file':
                    return ['üìÑ', item.link, item.name];
            }
        })();

        listItemsHtml += `
        <li class="has-toggle">
            <span class="triangle-toggle"></span><a class="toggle-icon" href="#">${content}</a>&ensp;<a class="file-icon" href="/${item.link}">${icon}</a>
            <div class="toggle-content" style="display:none;" data-src="/${dataSrc}">
            </div>
        </li>`;
    });

    return `<ul>${listItemsHtml}</ul>`;
}
